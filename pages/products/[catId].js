import Head from 'next/head';
import ProductsList from '../../components/productsList';
import { client } from '../../graphql/client';
import { gql } from '@apollo/client';
import ProductFilter from '../../components/productFilter';
import { styled, Box, Drawer } from '@mui/material';
import { useFilterContext } from '../../contexts/FilterContext';
import { useTheme } from 'next-themes';

const drawerWidth = 240;

const Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(
  ({ theme, open }) => ({
    flexGrow: 1,
    padding: theme.spacing(3),
    transition: theme.transitions.create('margin', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    marginLeft: `-${drawerWidth}px`,
    ...(open && {
      transition: theme.transitions.create('margin', {
        easing: theme.transitions.easing.easeOut,
        duration: theme.transitions.duration.enteringScreen,
      }),
      marginLeft: 0,
    }),
  })
);

export default function ProductsPage({ products }) {
  const { resolvedTheme } = useTheme();
  const { open } = useFilterContext();
  
  return (
    <>
      <Head>
        <title>Gaming World-{products.data.products[0].category.title}</title>
        <meta name='Gaming World' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Box sx={{ display: 'flex', zIndex: 100 }}>
        <Drawer
          sx={{
            width: drawerWidth,
            flexShrink: 0,
            '& .MuiDrawer-paper': {
              width: drawerWidth,
              boxSizing: 'border-box',
              background:
                resolvedTheme === 'light'
                  ? 'rgb(243 244 246)'
                  : 'rgb(31 41 55)',
            },
          }}
          variant='persistent'
          anchor='left'
          open={open}
        >
          <ProductFilter products={products} />
        </Drawer>
        <Main open={open}>
          <ProductsList products={products} />
        </Main>
      </Box>
    </>
  );
}

export async function getServerSideProps({ params: { catId } }) {
  const GET_PRODUCTS = gql`
    query ($id: uuid!) @cached(refresh: true) {
      products(
        where: { category: { id: { _eq: $id } } }
        order_by: { date: desc }
      ) {
        description
        id
        img
        price
        title
        date
        category {
          title
        }
        brandId
        brand {
          title
        }
      }
      brands(
        where: { products: { categoryId: { _eq: $id } } }
        order_by: { title: asc_nulls_first }
      ) {
        title
      }
    }
  `;
  const data = await client.query({
    query: GET_PRODUCTS,
    variables: {
      id: catId,
    },
  });

  return {
    props: {
      products: data,
    },
  };
}
